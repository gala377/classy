

type Foo {
    bar: std::String
    baz: std::Int
    qux: Bar(std::String)
}

type { 
    Show(a),
} => Bar(a) {
    foo: Foo
    bar: (std::Int, std::Int)
    baz: a
}

type Baz = (std::Int, std::Int)

class WellFormed(a) {
    methods for a {
        show: (a) -> std::String
    }
    methods for std::String {
        read: (std::String) -> a
    }
}

instance something for { Show(a) } => WellFormed(a) {
    methods for a {
        show: (a) -> std::String
        show x = ()
    }
    methods for std::String {
        read: (std::String) -> a
        read x = ()
    }
}

class Conv(a, b) {
    methods for a {
        cast: (a) -> b
    }
}

from: { Conv(a, b) } => (a) -> b
from x = x.cast()


methods for Foo {
    foo: () -> ()
    foo {
        bar()
    }

    bar: () -> ()
    bar = ()
}

class { 
    WellFormed(a), 
} => Show(a) {
    show: (a) -> std::String
    
    castShow: { Conv(a, std::String) } => (a) -> std::String
}