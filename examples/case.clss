@runtime @empty
print: (String) -> ()

type Option(a) {
    Some(a)
    None
}

type Foo {
    Error { msg: String, cause: String }
    Nothing
}

default: (Option(a), a) -> a
default (opt, def) = opt match {
    Some(x) => x
    None => def
}

main {
    let a = Option.Some("hello")
    let b = Option.None
    let c = Foo.Error { 
        cause = "I don't know" 
        msg = "hello"
    }
    let a = Option.Some("a")
    let b = Option.Some(1)
    let res = Option.Some(1) match {
        Some(1) => {
            "is 1"
        }
        Some(3) => {
            "is 3"
        }
        Some(x) => {
            "is x"
        }
        None => "is_none"
        _ => "anything else"
    }
    print res
    print(default(Option.Some("x"), "hello"))
}

